{"code":"import { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nvar targetOrigin = 'http://localhost:3000';\n/**\n * @description\n * Set the [window.postMessage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n * `targetOrigin`. The Vendure ui-devkit uses the postMessage API to\n * enable cross-frame and cross-origin communication between the ui extension code and the Admin UI\n * app. The `targetOrigin` is a security feature intended to provide control over where messages are sent.\n *\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport function setTargetOrigin(value) {\n    targetOrigin = value;\n}\n/**\n * @description\n * Retrieves information about the current route of the host application, since it is not possible\n * to otherwise get this information from within the child iframe.\n *\n * @example\n * ```ts\n * import { getActivatedRoute } from '\\@vendure/ui-devkit';\n *\n * const route = await getActivatedRoute();\n * const slug = route.params.slug;\n * ```\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport function getActivatedRoute() {\n    return sendMessage('active-route', {}).toPromise();\n}\n/**\n * @description\n * Perform a GraphQL query and returns either an Observable or a Promise of the result.\n *\n * @example\n * ```ts\n * import { graphQlQuery } from '\\@vendure/ui-devkit';\n *\n * const productList = await graphQlQuery(`\n *   query GetProducts($skip: Int, $take: Int) {\n *       products(options: { skip: $skip, take: $take }) {\n *           items { id, name, enabled },\n *           totalItems\n *       }\n *   }`, {\n *     skip: 0,\n *     take: 10,\n *   }).then(data => data.products);\n * ```\n *\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport function graphQlQuery(document, variables, fetchPolicy) {\n    var result$ = sendMessage('graphql-query', { document: document, variables: variables, fetchPolicy: fetchPolicy });\n    return {\n        then: function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return (_a = result$\n                .pipe(take(1))\n                .toPromise())\n                .then.apply(_a, args);\n        },\n        stream: result$,\n    };\n}\n/**\n * @description\n * Perform a GraphQL mutation and returns either an Observable or a Promise of the result.\n *\n * @example\n * ```ts\n * import { graphQlMutation } from '\\@vendure/ui-devkit';\n *\n * const disableProduct = (id: string) => {\n *   return graphQlMutation(`\n *     mutation DisableProduct($id: ID!) {\n *       updateProduct(input: { id: $id, enabled: false }) {\n *         id\n *         enabled\n *       }\n *     }`, { id })\n *     .then(data => data.updateProduct)\n * }\n * ```\n *\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport function graphQlMutation(document, variables) {\n    var result$ = sendMessage('graphql-mutation', { document: document, variables: variables });\n    return {\n        then: function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return (_a = result$\n                .pipe(take(1))\n                .toPromise())\n                .then.apply(_a, args);\n        },\n        stream: result$,\n    };\n}\n/**\n * @description\n * Display a toast notification.\n *\n * @example\n * ```ts\n * import { notify } from '\\@vendure/ui-devkit';\n *\n * notify({\n *   message: 'Updated Product',\n *   type: 'success'\n * });\n * ```\n *\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport function notify(options) {\n    void sendMessage('notification', options).toPromise();\n}\nfunction sendMessage(type, data) {\n    var requestId = type + '__' + Math.random().toString(36).substr(3);\n    var message = {\n        requestId: requestId,\n        type: type,\n        data: data,\n    };\n    return new Observable(function (subscriber) {\n        var hostWindow = window.opener || window.parent;\n        var handleReply = function (event) {\n            var response = event.data;\n            if (response && response.requestId === requestId) {\n                if (response.complete) {\n                    subscriber.complete();\n                    tearDown();\n                    return;\n                }\n                if (response.error) {\n                    subscriber.error(response.data);\n                    tearDown();\n                    return;\n                }\n                subscriber.next(response.data);\n            }\n        };\n        var tearDown = function () {\n            hostWindow.postMessage({ requestId: requestId, type: 'cancellation', data: null }, targetOrigin);\n        };\n        window.addEventListener('message', handleReply);\n        hostWindow.postMessage(message, targetOrigin);\n        return tearDown;\n    });\n}\n//# sourceMappingURL=devkit-client-api.js.map","references":["/home/linas/Downloads/vedure/vendure/packages/common/lib/extension-host-types.d.ts","/home/linas/Downloads/vedure/vendure/node_modules/rxjs/dist/types/index.d.ts","/home/linas/Downloads/vedure/vendure/node_modules/rxjs/dist/types/operators/index.d.ts"],"map":"{\"version\":3,\"file\":\"devkit-client-api.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/client/devkit-client-api.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"undefined/placeholder/devkit-client-api.d.ts","writeByteOrderMark":false,"text":"import { ActiveRouteData, NotificationMessage, WatchQueryFetchPolicy } from '@vendure/common/lib/extension-host-types';\nimport { Observable } from 'rxjs';\n/**\n * @description\n * Set the [window.postMessage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n * `targetOrigin`. The Vendure ui-devkit uses the postMessage API to\n * enable cross-frame and cross-origin communication between the ui extension code and the Admin UI\n * app. The `targetOrigin` is a security feature intended to provide control over where messages are sent.\n *\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport declare function setTargetOrigin(value: string): void;\n/**\n * @description\n * Retrieves information about the current route of the host application, since it is not possible\n * to otherwise get this information from within the child iframe.\n *\n * @example\n * ```ts\n * import { getActivatedRoute } from '\\@vendure/ui-devkit';\n *\n * const route = await getActivatedRoute();\n * const slug = route.params.slug;\n * ```\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport declare function getActivatedRoute(): Promise<ActiveRouteData>;\n/**\n * @description\n * Perform a GraphQL query and returns either an Observable or a Promise of the result.\n *\n * @example\n * ```ts\n * import { graphQlQuery } from '\\@vendure/ui-devkit';\n *\n * const productList = await graphQlQuery(`\n *   query GetProducts($skip: Int, $take: Int) {\n *       products(options: { skip: $skip, take: $take }) {\n *           items { id, name, enabled },\n *           totalItems\n *       }\n *   }`, {\n *     skip: 0,\n *     take: 10,\n *   }).then(data => data.products);\n * ```\n *\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport declare function graphQlQuery<T, V extends {\n    [key: string]: any;\n}>(document: string, variables?: {\n    [key: string]: any;\n}, fetchPolicy?: WatchQueryFetchPolicy): {\n    then: Promise<T>['then'];\n    stream: Observable<T>;\n};\n/**\n * @description\n * Perform a GraphQL mutation and returns either an Observable or a Promise of the result.\n *\n * @example\n * ```ts\n * import { graphQlMutation } from '\\@vendure/ui-devkit';\n *\n * const disableProduct = (id: string) => {\n *   return graphQlMutation(`\n *     mutation DisableProduct($id: ID!) {\n *       updateProduct(input: { id: $id, enabled: false }) {\n *         id\n *         enabled\n *       }\n *     }`, { id })\n *     .then(data => data.updateProduct)\n * }\n * ```\n *\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport declare function graphQlMutation<T, V extends {\n    [key: string]: any;\n}>(document: string, variables?: {\n    [key: string]: any;\n}): {\n    then: Promise<T>['then'];\n    stream: Observable<T>;\n};\n/**\n * @description\n * Display a toast notification.\n *\n * @example\n * ```ts\n * import { notify } from '\\@vendure/ui-devkit';\n *\n * notify({\n *   message: 'Updated Product',\n *   type: 'success'\n * });\n * ```\n *\n * @docsCategory ui-devkit\n * @docsPage UiDevkitClient\n */\nexport declare function notify(options: NotificationMessage['data']): void;\n"}}
